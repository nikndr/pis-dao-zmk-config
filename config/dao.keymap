/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#define HOST_OS 2

// Increase mouse movement and scroll speeds

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25    // default: 10

#include "zmk-helpers/helper.h"
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define MSE 4
#define HRD 5

&lt {
    quick_tap_ms = <200>;
    flavor = "balanced";
};

&sk {
    release-after-ms = <450>;
    quick-release;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

&mmv {
    time-to-max-speed-ms = <600>;
    acceleration-exponent = <1>;
};

&msc {
    time-to-max-speed-ms = <600>;
    acceleration-exponent = <0>;
};

/ {
    chosen {
        zmk,physical_layout = &dao_crkbd_layout;

        // zmk,physical_layout = &dao_full_layout;
    };
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MOD_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <170>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MOD_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <170>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        sc_part: sc_part {
            compatible = "zmk,behavior-tap-dance";
            label = "SC_PART";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(NUMBER_4))>, <&kp LS(LG(NUMBER_5))>;
        };

        sc_full: sc_full {
            compatible = "zmk,behavior-tap-dance";
            label = "SC_FULL";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(NUMBER_1))>, <&kp LS(LA(LG(NUMBER_3)))>;
        };

        th_hold: th_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
        };

        nswin: nswin {
            compatible = "zmk,behavior-tap-dance";
            label = "NEW_SAFARI_WIN";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LS(N0)))>, <&kp LG(LA(LS(NUMBER_1)))>;
        };

        sk_sft: sk_sft {
            compatible = "zmk,behavior-sticky-key";
            label = "SK_SFT";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <450>;
            quick-release;
        };

        meh_hyper: meh_hyper {
            compatible = "zmk,behavior-tap-dance";
            label = "MEH_HYPER";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(LEFT_SHIFT))>, <&kp LC(LA(LG(LEFT_SHIFT)))>;
        };

        sc_up_left: sc_up_left {
            compatible = "zmk,behavior-mod-morph";
            label = "SC_UP_LEFT";
            bindings = <&msc SCRL_UP>, <&msc SCRL_LEFT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        sc_down_right: sc_down_right {
            compatible = "zmk,behavior-mod-morph";
            label = "SC_DOWN_RIGHT";
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        sh_cps: sh_cps {
            compatible = "zmk,behavior-tap-dance";
            label = "SH_CPS";
            #binding-cells = <0>;
            bindings = <&sk_sft LEFT_SHIFT>, <&kp CAPSLOCK>;
        };

        sp_ct_ms: sp_ct_ms {
            compatible = "zmk,behavior-tap-dance";
            label = "SP_CT_MS";
            #binding-cells = <0>;
            bindings = <&lt 4 SPACE>, <&mo 2>;
        };

        ltr: ltr {
            compatible = "zmk,behavior-hold-tap";
            label = "LTR";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <170>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        hardware_left {
            bindings = <&to 8>;
            key-positions = <5 17 29 37>; // t g b keys
            layers = <0>;
        };

        hardware_right {
            bindings = <&to 8>;
            key-positions = <6 18 30 40>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <14 15>; // sd
            layers = <0 6>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };

        combo_return {
            bindings = <&kp RETURN>;
            key-positions = <20 21>;
            timeout-ms = <40>;
            layers = <0 6>;
            require-prior-idle-ms = <150>;
        };

        combo_equals {
            bindings = <&kp TAB>;
            key-positions = <27 26>;
            layers = <0>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };

        combo_input_src {
            bindings = <&kp LC(SPACE)>;
            key-positions = <21 19>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
            layers = <0 6>;
        };

        combo_1password {
            bindings = <&kp LG(LS(SPACE))>;
            key-positions = <14 16>;
        };

        go_gayming {
            bindings = <&to 6>;
            key-positions = <1 2 3 4>;
            layers = <0>;
        };

        quit_gayming {
            bindings = <&to 0>;
            key-positions = <7 8 9 10>;
            layers = <6>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <27 28>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
    };

    macros {
        log_hrd_lyr: log_hrd_lyr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(H) &kp LS(A) &kp LS(R) &kp LS(D) &kp LS(W) &kp LS(A) &kp LS(R) &kp LS(E) &kp SPACE &kp LS(L) &kp LS(A) &kp LS(Y) &kp LS(E) &kp LS(R)>;
            label = "LOG_HRD_LYR";
        };

        menu_help: menu_help {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(F2)>,
                <&macro_wait_time 200>,
                <&kp H>,
                <&macro_wait_time 80>,
                <&kp E>,
                <&macro_wait_time 80>,
                <&kp L>,
                <&macro_wait_time 80>,
                <&kp P>,
                <&macro_wait_time 80>,
                <&kp RETURN>;

            label = "MENU_HELP";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "BASE";
            bindings = <
&kp GRAVE      &kp Q              &kp W                &kp E            &kp R             &kp T        &kp Y  &kp U             &kp I            &kp O                &kp P                 &kp LBKT
&kp RBKT       &hml LEFT_SHIFT A  &hml LEFT_CONTROL S  &hml LEFT_ALT D  &hml LEFT_META F  &kp G        &kp H  &hmr LEFT_META J  &hmr LEFT_ALT K  &hmr LEFT_CONTROL L  &hmr LEFT_SHIFT SEMI  &kp SQT
&kp BACKSLASH  &lt 5 Z            &kp X                &kp C            &kp V             &kp B        &kp N  &ltr 2 M          &kp COMMA        &kp DOT              &kp FSLH              &kp LC(SPACE)
                                                       &meh_hyper       &sh_cps           &lt 3 SPACE  &mo 1  &kp BACKSPACE     &kp GLOBE
            >;
        };

        characters {
            display-name = "SYM";
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN    &kp POUND  &kp DOLLAR  &kp PERCENT     &kp CARET  &kp AMPS           &kp ASTERISK   &kp PIPE    &trans            &trans
&trans  &kp N1           &kp N2         &kp N3     &kp N4      &kp N5          &kp N6     &kp N7             &kp N8         &kp N9      &kp N0            &trans
&trans  &kp TILDE        &kp BACKSLASH  &kp PLUS   &kp MINUS   &kp UNDERSCORE  &kp GRAVE  &kp DOUBLE_QUOTES  &kp LESS_THAN  &kp PERIOD  &kp GREATER_THAN  &trans
                                        &trans     &trans      &trans          &trans     &trans             &trans
            >;
        };

        brackets {
            display-name = "SYM";
            bindings = <
&trans  &trans  &trans  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp COLON  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans                &trans                 &trans     &trans  &trans  &trans
            >;
        };

        controls {
            display-name = "CTL";
            bindings = <
&trans  &trans     &trans     &trans    &trans    &trans  &kp LG(LEFT_BRACKET)  &kp END        &kp HOME      &kp LG(RIGHT_BRACKET)  &trans  &trans
&trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans  &kp LEFT              &kp DOWN       &kp UP_ARROW  &kp RIGHT              &trans  &trans
&trans  &trans     &trans     &trans    &trans    &trans  &kp LA(LEFT)          &kp PAGE_DOWN  &kp PAGE_UP   &kp LA(RIGHT)          &trans  &trans
                              &trans    &trans    &trans  &trans                &kp BACKSPACE  &kp DELETE
            >;
        };

        function {
            bindings = <
&trans  &kp F1  &kp F2  &kp F3    &kp F4      &kp F5  &kp F6                &kp F7             &kp F8           &kp F9            &kp F10  &trans
&trans  &trans  &trans  &sc_full  &sc_part    &nswin  &kp C_BRIGHTNESS_INC  &kp C_PREVIOUS     &kp C_NEXT       &kp C_PLAY_PAUSE  &kp F11  &trans
&trans  &trans  &trans  &trans    &menu_help  &trans  &kp C_BRIGHTNESS_DEC  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE        &kp F12  &trans
                        &trans    &trans      &trans  &trans                &trans             &trans
            >;

            label = "FCN";
        };

        mouse {
            display-name = "MOUSE";
            bindings = <
&trans  &trans  &trans     &trans    &trans    &trans  &sc_up_left     &kp PAGE_UP     &mmv MOVE_UP    &kp HOME         &trans  &trans
&trans  &trans  &kp LCTRL  &kp LALT  &kp LGUI  &trans  &sc_down_right  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans     &trans    &trans    &trans  &trans          &kp PAGE_DOWN   &trans          &kp END          &trans  &trans
                           &trans    &trans    &trans  &mkp LCLK       &mkp MCLK       &mkp RCLK
            >;
        };

        game {
            display-name = "GAME";
            bindings = <
&kp GRAVE       &kp Q                &kp W            &kp E         &kp R             &kp T        &kp Y   &kp U            &kp I        &kp O                &kp P                 &kp LBKT
&kp TAB         &kp A                &kp S            &kp D         &kp F             &kp G        &kp H   &hmr LEFT_GUI J  &hmr LALT K  &hmr LEFT_CONTROL L  &hmr LEFT_SHIFT SEMI  &kp SQT
&kp LEFT_SHIFT  &hml LEFT_CONTROL Z  &hml LEFT_ALT X  &kp C         &kp V             &kp B        &kp N   &kp M            &kp COMMA    &kp DOT              &kp FSLH              &kp LC(SPACE)
                                                      &kp LEFT_ALT  &kp LEFT_CONTROL  &lt 7 SPACE  &trans  &kp BACKSPACE    &kp GLOBE
            >;
        };

        game_fn {
            display-name = "GAME_FN";
            bindings = <
&kp Y           &kp F1                      &kp F2            &kp F3  &kp F4  &kp F5  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&kp H           &kp N1                      &kp N2            &kp N3  &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0   &trans
&kp LEFT_SHIFT  &hml LEFT_CONTROL NUMBER_6  &hml LEFT_ALT N7  &kp N8  &kp N9  &kp N0  &trans  &trans  &trans  &trans  &trans   &trans
                                                              &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        hardware {
            display-name = "HARD";
            bindings = <
&bootloader  &studio_unlock  &none         &none         &none         &none         &none         &none         &none         &none         &studio_unlock  &bootloader
&bt BT_CLR   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &bt BT_CLR
&sys_reset   &none           &none         &none         &none         &log_hrd_lyr  &log_hrd_lyr  &none         &none         &none         &none           &sys_reset
                                           &to 0         &to 0         &to 0         &to 0         &to 0         &to 0
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        function_layer {
            if-layers = <4 1>;
            then-layer = <5>;
        };
    };
};

/*
 *    0   1   2   3   4   5     6   7   8   9  10  11
 *   12  13  14  15  16  17    18  19  20  21  22  23
 *   24  25  26  27  28  29    30  31  32  33  34  35
 *               36  37  38    39  40  41
 */
