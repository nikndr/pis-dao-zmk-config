/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define HOST_OS 2
#include "zmk-helpers/helper.h"
#include "zmk-helpers/unicode-chars/ukrainian.dtsi"

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define UKR 4

&lt { quick_tap_ms = <200>; };

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    chosen {
        zmk,physical_layout = &dao_crkbd_layout;

        // zmk,physical_layout = &dao_full_layout;
    };
};

// Convert existing macros to zmk-helpers Unicode definitions
ZMK_UNICODE_SINGLE(semicolon, N0, N0, N3, B)     // ;
ZMK_UNICODE_SINGLE(colon, N0, N0, N3, A)         // :
ZMK_UNICODE_SINGLE(quote, N0, N0, N2, N7)        // '
ZMK_UNICODE_SINGLE(double_quote, N0, N0, N2, N2) // "
ZMK_UNICODE_SINGLE(percent, N0, N0, N2, N5)      // %
ZMK_UNICODE_SINGLE(at, N0, N0, N4, N0)           // @

/ {
    behaviors {
        stl: switch_to_layer {
            compatible = "zmk,behavior-toggle-layer";
            label = "SWITCH_TO_LAYER";
            #binding-cells = <1>;
        };

        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        td_shift: tap_dance_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SHIFT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LSHFT>, <&kp CAPS>;
        };

        qdq: qdq {
            compatible = "zmk,behavior-tap-dance";
            label = "Q_DQ";
            #binding-cells = <0>;
            tapping-term-ms = <160>;
            bindings = <&quote>, <&double_quote>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_hardware {
            bindings = <&tog 3>;
            key-positions = <5 17 29>; // t g b keys
            layers = <0>;
        };

        combo_ukrainian {
            bindings = <&to 4>;
            key-positions = <5 6>; // Switch to Ukrainian layer
            layers = <0>;
        };

        combo_base {
            bindings = <&to 0>;
            key-positions = <17 18>; // Return to base layer
            layers = <4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "MAIN";
            bindings = <
&kp TAB        &kp Q         &kp W        &kp E         &kp R         &kp T        &kp Y      &kp U         &kp I         &kp O        &kp P            &kp LBKT
&kp ESCAPE     &bhm LCTRL A  &bhm LALT S  &bhm LMETA D  &bhm LSHFT F  &kp G        &kp H      &bhm RSHFT J  &bhm RMETA K  &bhm RALT L  &bhm RCTRL SEMI  &kp SQT
&kp BACKSLASH  &kp Z         &kp X        &kp C         &kp V         &kp B        &kp N      &kp M         &kp COMMA     &kp DOT      &kp FSLH         &kp RIGHT_BRACKET
                                          &kp TAB       &td_shift     &lt 1 SPACE  &lt 2 RET  &kp BSPC      &kp ESCAPE
            >;
        };

        controls {
            display-name = "CTL";
            bindings = <
&kp C_VOLUME_UP  &kp F1          &kp F2      &kp F3     &kp F4                &kp F5         &kp F6                &kp F7      &kp F8        &kp F9                 &kp F10  &trans
&kp C_VOL_DN     &kp LCTRL       &kp LALT    &kp LMETA  &kp LSHFT             &none          &kp LEFT              &kp DOWN    &kp UP_ARROW  &kp RIGHT              &kp F11  &kp LC(LA(LG(O)))
&kp K_MUTE       &kp C_PREVIOUS  &kp C_NEXT  &kp C_PP   &kp C_BRIGHTNESS_DEC  &kp C_BRI_INC  &kp LG(LEFT_BRACKET)  &none       &none         &kp LG(RIGHT_BRACKET)  &kp F12  &trans
                                             &trans     &trans                &trans         &trans                &kp DELETE  &trans
            >;
        };

        characters {
            display-name = "SYM";
            bindings = <
&qdq          &kp EXCL    &at       &kp HASH   &kp DOLLAR  &percent   &kp CARET       &kp AMPERSAND     &kp ASTRK          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH
&kp QUESTION  &kp N1      &kp N2    &kp N3     &kp N4      &kp N5     &kp N6          &kp N7            &kp N8             &kp N9                &kp N0                 &kp SLASH
&kp GRAVE     &semicolon  &colon    &kp MINUS  &kp PLUS    &kp EQUAL  &kp UNDERSCORE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp TILDE
                                    &trans     &trans      &trans     &trans          &trans            &trans
            >;
        };

        hardware {
            display-name = "ADJ";
            bindings = <
&bootloader  &studio_unlock  &none          &none             &none             &none         &none         &none          &none          &none             &studio_unlock    &bootloader
&bt BT_CLR   &bt BT_SEL 0    &bt BT_SEL 1   &bt BT_SEL 2      &bt BT_SEL 3      &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3   &bt BT_SEL 2   &bt BT_SEL 1      &bt BT_SEL 0      &bt BT_CLR
&sys_reset   &kp LESS_THAN   &kp LESS_THAN  &kp GREATER_THAN  &kp GREATER_THAN  &none         &none         &kp LESS_THAN  &kp LESS_THAN  &kp GREATER_THAN  &kp GREATER_THAN  &sys_reset
                                            &trans            &to 0             &to 0         &to 0         &to 0          &trans
            >;
        };

        ukrainian {
            display-name = "УКР";
            bindings = <
&uk_g           &uk_i_short  &uk_ts  &uk_u  &uk_k  &uk_e        &uk_n     &uk_h    &uk_sh   &uk_sch  &uk_z    &uk_kh
&uk_yi          &uk_f        &uk_i   &uk_v  &uk_a  &uk_p        &uk_r     &uk_o    &uk_l    &uk_d    &uk_zh   &uk_ie
&trans          &uk_ya       &uk_ch  &uk_s  &uk_m  &uk_y        &uk_t     &uk_soft &uk_b    &uk_yu   &kp DOT  &trans
                                     &kp TAB &td_shift &lt 1 SPACE &lt 2 RET &kp BSPC &kp ESCAPE
            >;
        };
    };
};

/*
 *    0   1   2   3   4   5     6   7   8   9  10  11
 *   12  13  14  15  16  17    18  19  20  21  22  23
 *   24  25  26  27  28  29    30  31  32  33  34  35
 *               36  37  38    39  40  41
 */
