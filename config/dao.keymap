/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#define HOST_OS 2

// Increase mouse movement and scroll speeds

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25    // default: 10

#include "zmk-helpers/helper.h"
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define MSE 4
#define HRD 5

&lt {
    quick_tap_ms = <200>;
    flavor = "balanced";
};

&sk {
    release-after-ms = <450>;
    quick-release;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

&mmv {
    time-to-max-speed-ms = <600>;
    acceleration-exponent = <1>;
};

&msc {
    time-to-max-speed-ms = <600>;
    acceleration-exponent = <0>;
};

/ {
    chosen {
        zmk,physical_layout = &dao_crkbd_layout;

        // zmk,physical_layout = &dao_full_layout;
    };
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MOD_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MOD_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        sc_part: sc_part {
            compatible = "zmk,behavior-tap-dance";
            label = "SC_PART";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(NUMBER_4))>, <&kp LS(LG(NUMBER_5))>;
        };

        sc_full: sc_full {
            compatible = "zmk,behavior-tap-dance";
            label = "SC_FULL";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(NUMBER_1))>, <&kp LS(LA(LG(NUMBER_3)))>;
        };

        nswin: nswin {
            compatible = "zmk,behavior-tap-dance";
            label = "NEW_SAFARI_WIN";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LS(N0)))>, <&kp LG(LA(LS(NUMBER_1)))>;
        };

        meh_hyper: meh_hyper {
            compatible = "zmk,behavior-tap-dance";
            label = "MEH_HYPER";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(LEFT_SHIFT))>, <&kp LC(LA(LG(LEFT_SHIFT)))>;
        };

        ltr: ltr {
            compatible = "zmk,behavior-hold-tap";
            label = "LTR";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <100>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        lyr_debug: lyr_debug {
            compatible = "zmk,behavior-tap-dance";
            label = "LYR_DEBUG";
            #binding-cells = <0>;
            bindings =
                <&mo 4>,
                <&mo 2>,
                <&mo 5>,
                <&mo 6>,
                <&mo 7>,
                <&mo 8>,
                <&mo 9>,
                <&mo 10>;
        };

        c_m: c_m {
            compatible = "zmk,behavior-tap-dance";
            label = "C_M";
            #binding-cells = <0>;
            bindings = <&mo 4>, <&mo 7>;

            tapping-term-ms = <200>;
        };

        ltl: ltl {
            compatible = "zmk,behavior-hold-tap";
            label = "LTL";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <100>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        cb_b_l: cb_b_l {
            compatible = "zmk,behavior-mod-morph";
            label = "CB_B_L";
            bindings = <&kp LEFT_BRACE>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        cb_b_r: cb_b_r {
            compatible = "zmk,behavior-mod-morph";
            label = "CB_B_R";
            bindings = <&kp RIGHT_BRACE>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        b_lt_l: b_lt_l {
            compatible = "zmk,behavior-mod-morph";
            label = "B_LT_L";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        b_lt_r: b_lt_r {
            compatible = "zmk,behavior-mod-morph";
            label = "B_LT_R";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        per_col: per_col {
            compatible = "zmk,behavior-tap-dance";
            label = "PER_COL";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&kp COLON>;
        };

        appsw: appsw {
            compatible = "zmk,behavior-hold-tap";
            label = "APPSW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <140>;
        };
    };

    combos {
        compatible = "zmk,combos";

        hardware_left {
            bindings = <&to 10>;
            key-positions = <5 17 29 37>; // t g b keys
            layers = <0>;
        };

        hardware_right {
            bindings = <&to 10>;
            key-positions = <6 18 30 40>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <14 15>; // sd
            layers = <0 8>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
        };

        combo_return {
            bindings = <&kp RETURN>;
            key-positions = <20 21>;
            timeout-ms = <40>;
            layers = <0 8>;
            require-prior-idle-ms = <100>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <27 26>;
            layers = <0>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };

        combo_input_src {
            bindings = <&kp LC(SPACE)>;
            key-positions = <21 19>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
            layers = <0 8>;
        };

        combo_1password {
            bindings = <&kp LG(LS(SPACE))>;
            key-positions = <14 16>;
        };

        go_gayming {
            bindings = <&to 8>;
            key-positions = <1 2 3 4>;
            layers = <0>;
        };

        quit_gayming {
            bindings = <&to 0>;
            key-positions = <7 8 9 10>;
            layers = <8>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <27 28>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        page_up {
            bindings = <&kp PAGE_UP>;
            key-positions = <7 9>;
            layers = <0 5 7>;
        };

        page_down {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <31 33>;
            layers = <0 5 7>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <7 8 9>;
            layers = <0 5 7>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <31 32 33>;
            layers = <0 5 7>;
        };

        not_equal {
            bindings = <&not_equal>;
            key-positions = <26 27>;
            layers = <4>;
            require-prior-idle-ms = <120>;
            timeout-ms = <40>;
        };

        combo_tab_r {
            bindings = <&kp TAB>;
            key-positions = <32 33>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_grave_r {
            bindings = <&kp GRAVE>;
            key-positions = <31 32>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_arrow {
            bindings = <&arrow>;
            key-positions = <27 28>;
            timeout-ms = <40>;
            require-prior-idle-ms = <120>;
            layers = <4>;
        };

        context_menu {
            bindings = <&kp LC(ENTER)>;
            key-positions = <26 28>;
        };
    };

    macros {
        log_hrd_lyr: log_hrd_lyr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(H) &kp LS(A) &kp LS(R) &kp LS(D) &kp LS(W) &kp LS(A) &kp LS(R) &kp LS(E) &kp SPACE &kp LS(L) &kp LS(A) &kp LS(Y) &kp LS(E) &kp LS(R)>;
            label = "LOG_HRD_LYR";
        };

        menu_help: menu_help {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(F2)>,
                <&macro_wait_time 200>,
                <&kp H>,
                <&macro_wait_time 80>,
                <&kp E>,
                <&macro_wait_time 80>,
                <&kp L>,
                <&macro_wait_time 80>,
                <&kp P>,
                <&macro_wait_time 80>,
                <&kp RETURN>;

            label = "MENU_HELP";
        };

        not_equal: not_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCLAMATION &kp EQUAL>;
            label = "NOT_EQUAL";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            label = "ARROW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "BASE";
            bindings = <
&kp LC(ENTER)  &kp Q              &kp W                &kp E            &kp R             &kp T        &kp Y  &kp U             &kp I                       &kp O                &kp P                 &kp SQT
&b_lt_l        &hml LEFT_SHIFT A  &hml LEFT_CONTROL S  &hml LEFT_ALT D  &hml LEFT_META F  &kp G        &kp H  &hmr LEFT_META J  &hmr LEFT_ALT K             &hmr LEFT_CONTROL L  &hmr LEFT_SHIFT SEMI  &b_lt_r
&cb_b_l        &lt 7 Z            &kp X                &kp C            &ltl 3 V          &kp B        &kp N  &ltr 2 M          &kp COMMA                   &kp DOT              &kp FSLH              &cb_b_r
                                                       &meh_hyper       &kp LEFT_SHIFT    &lt 5 SPACE  &c_m   &mo 1             &appsw GLOBE LA(LC(SPACE))
            >;
        };

        ukr_extra {
            bindings = <
&trans  &trans            &trans             &trans  &trans  &kp SINGLE_QUOTE  &trans  &kp GRAVE  &trans  &trans  &trans  &trans
&trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans  &trans  &trans            &trans  &trans     &trans  &trans  &trans  &trans
&trans  &trans            &trans             &trans  &trans  &kp BACKSLASH     &trans  &trans     &trans  &trans  &trans  &trans
                                             &trans  &trans  &trans            &trans  &trans     &trans
            >;
        };

        brackets {
            display-name = "BRK";
            bindings = <
&trans  &trans  &trans         &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LESS_THAN  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GREATER_THAN  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans         &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans            &trans  &trans  &trans  &trans  &trans  &trans
                               &trans                &trans                 &trans            &trans  &trans  &trans
            >;
        };

        NUMPAD {
            display-name = "NUM";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp KP_PLUS   &kp N7  &kp N8  &kp N9  &kp KP_MULTIPLY  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp KP_EQUAL  &kp N4  &kp N5  &kp N6  &per_col         &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp KP_MINUS  &kp N1  &kp N2  &kp N3  &kp KP_DIVIDE    &trans
                        &trans  &trans  &trans  &kp SPACE     &kp N0  &trans
            >;
        };

        characters {
            display-name = "SYM";
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN   &kp POUND    &kp DOLLAR    &kp PERCENT        &kp CARET  &kp AMPS   &kp ASTERISK  &kp BACKSLASH  &kp PIPE  &trans
&trans  &kp N1           &kp N2        &kp N3       &kp N4        &kp N5             &kp N6     &kp N7     &kp N8        &kp N9         &kp N0    &trans
&trans  &kp UNDERSCORE   &kp KP_EQUAL  &kp KP_PLUS  &kp KP_MINUS  &kp DOUBLE_QUOTES  &kp GRAVE  &kp TILDE  &arrow        &trans         &trans    &trans
                                       &trans       &trans        &trans             &trans     &trans     &trans
            >;
        };

        controls {
            display-name = "CTL";
            bindings = <
&trans  &trans         &kp C_PREVIOUS     &kp C_NEXT       &kp C_PP    &mo 3                 &kp LG(LEFT_BRACKET)  &trans             &trans         &kp LG(RIGHT_BRACKET)  &trans  &trans
&trans  &kp LSHFT      &kp LCTRL          &kp LALT         &kp LGUI    &kp C_BRIGHTNESS_INC  &kp LEFT              &kp DOWN           &kp UP_ARROW   &kp RIGHT              &trans  &trans
&trans  &kp BACKSPACE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE  &kp C_BRIGHTNESS_DEC  &kp LG(BACKSPACE)     &kp LA(BACKSPACE)  &kp BACKSPACE  &kp DELETE             &trans  &trans
                                          &trans           &trans      &trans                &trans                &trans             &trans
            >;
        };

        function {
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5      &kp F6    &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &trans  &trans  &trans  &trans  &nswin      &sc_part  &trans  &trans  &trans  &kp F11  &trans
&trans  &trans  &trans  &trans  &trans  &menu_help  &sc_full  &trans  &trans  &trans  &kp F12  &trans
                        &trans  &trans  &trans      &trans    &trans  &trans
            >;

            label = "FCN";
        };

        mouse {
            display-name = "MS";
            bindings = <
&trans  &trans  &trans     &trans    &trans    &trans  &msc SCRL_UP    &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &trans  &trans
&trans  &trans  &kp LCTRL  &kp LALT  &kp LGUI  &trans  &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans     &trans    &trans    &trans  &trans          &mkp LCLK       &mkp MCLK       &mkp RCLK        &trans  &trans
                           &trans    &trans    &trans  &mkp LCLK       &mkp MCLK       &mkp RCLK
            >;
        };

        game {
            display-name = "GAME";
            bindings = <
&kp GRAVE       &kp Q                &kp W            &kp E         &kp R             &kp T        &kp Y   &kp U            &kp I        &kp O                &kp P                 &kp LBKT
&kp TAB         &kp A                &kp S            &kp D         &kp F             &kp G        &kp H   &hmr LEFT_GUI J  &hmr LALT K  &hmr LEFT_CONTROL L  &hmr LEFT_SHIFT SEMI  &kp SQT
&kp LEFT_SHIFT  &hml LEFT_CONTROL Z  &hml LEFT_ALT X  &kp C         &kp V             &kp B        &kp N   &kp M            &kp COMMA    &kp DOT              &kp FSLH              &kp LC(SPACE)
                                                      &kp LEFT_ALT  &kp LEFT_CONTROL  &lt 9 SPACE  &trans  &kp BACKSPACE    &kp GLOBE
            >;
        };

        game_fn {
            display-name = "GAME_FN";
            bindings = <
&kp Y           &kp F1                      &kp F2            &kp F3  &kp F4  &kp F5  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&kp H           &kp N1                      &kp N2            &kp N3  &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0   &trans
&kp LEFT_SHIFT  &hml LEFT_CONTROL NUMBER_6  &hml LEFT_ALT N7  &kp N8  &kp N9  &kp N0  &trans  &trans  &trans  &trans  &trans   &trans
                                                              &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        hardware {
            display-name = "HARD";
            bindings = <
&bootloader  &studio_unlock  &none         &none         &none         &bt BT_CLR_ALL  &bt BT_CLR_ALL  &none         &none         &none         &studio_unlock  &bootloader
&bt BT_CLR   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4    &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &bt BT_CLR
&sys_reset   &none           &none         &none         &none         &log_hrd_lyr    &log_hrd_lyr    &none         &none         &none         &none           &sys_reset
                                           &to 0         &to 0         &to 0           &to 0           &to 0         &to 0
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        function_layer {
            if-layers = <4 5>;
            then-layer = <6>;
        };
    };
};

/*
 *    0   1   2   3   4   5     6   7   8   9  10  11
 *   12  13  14  15  16  17    18  19  20  21  22  23
 *   24  25  26  27  28  29    30  31  32  33  34  35
 *               36  37  38    39  40  41
 */
