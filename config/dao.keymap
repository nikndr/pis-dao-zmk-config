/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#define HOST_OS 2

#include "zmk-helpers/helper.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&sk {
    release-after-ms = <500>;
    quick-release;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    chosen {
        zmk,physical_layout = &dao_crkbd_layout;

        // zmk,physical_layout = &dao_full_layout;
    };
};

/ {
    behaviors {
        stl: switch_to_layer {
            compatible = "zmk,behavior-toggle-layer";
            label = "SWITCH_TO_LAYER";
            #binding-cells = <1>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MOD_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MOD_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        td_shift: tap_dance_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SHIFT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LSHFT>, <&caps_word>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_hardware {
            bindings = <&tog 4>;
            key-positions = <5 17 29>; // t g b keys
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "MAIN";
            bindings = <
&kp GRAVE      &kp Q              &kp W         &kp E        &kp R         &kp T        &kp Y      &kp U         &kp I        &kp O         &kp P                  &kp LBKT
&kp RBKT       &hml LEFT_SHIFT A  &hml LCTRL S  &hml LALT D  &hml LMETA F  &kp G        &kp H      &hmr RMETA J  &hmr RALT K  &hmr RCTRL L  &hmr RIGHT_SHIFT SEMI  &kp SQT
&kp BACKSLASH  &kp Z              &kp X         &kp C        &kp V         &kp B        &kp N      &kp M         &kp COMMA    &kp DOT       &kp FSLH               &kp QUESTION
                                                &kp TAB      &td_shift     &lt 1 SPACE  &lt 2 RET  &kp BSPC      &kp ESCAPE
            >;
        };

        controls {
            display-name = "CTL";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp LG(LEFT_BRACKET)  &kp LG(Z)      &kp LS(LG(Z))  &kp LG(RIGHT_BRACKET)  &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT              &kp DOWN       &kp UP_ARROW   &kp RIGHT              &kp LC(SPACE)  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp HOME              &kp PAGE_DOWN  &kp PAGE_UP    &kp END                &trans         &trans
                        &trans  &trans  &trans  &trans                &kp DELETE     &trans
            >;
        };

        characters {
            display-name = "SYM";
            bindings = <
&kp CARET  &kp EXCLAMATION   &kp AT_SIGN        &kp POUND        &kp DOLLAR             &kp PERCENT     &kp KP_MULTIPLY  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_PLUS      &trans
&trans     &kp LESS_THAN     &kp LEFT_BRACKET   &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &kp UNDERSCORE  &kp KP_EQUAL     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_NUMBER_0  &trans
&trans     &kp GREATER_THAN  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp AMPERSAND   &kp KP_DIVIDE    &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_MINUS     &trans
                                                &trans           &trans                 &trans          &trans           &trans           &trans
            >;
        };

        function {
            bindings = <
&trans  &trans  &kp LS(LG(N5))            &kp LS(LG(NUMBER_1))  &kp C_BRIGHTNESS_INC  &kp C_VOLUME_UP    &trans  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &trans  &kp K_PREVIOUS            &kp K_NEXT            &kp K_PLAY_PAUSE      &kp K_MUTE         &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans  &kp LG(LA(LS(NUMBER_3)))  &kp LG(LS(NUMBER_4))  &kp C_BRIGHTNESS_DEC  &kp C_VOLUME_DOWN  &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                                          &trans                &trans                &trans             &trans  &trans  &trans
            >;

            label = "FCN";
        };

        hardware {
            display-name = "ADJ";
            bindings = <
&bootloader  &studio_unlock  &none          &none             &none             &none         &none         &none          &none          &none             &studio_unlock    &bootloader
&bt BT_CLR   &bt BT_SEL 0    &bt BT_SEL 1   &bt BT_SEL 2      &bt BT_SEL 3      &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3   &bt BT_SEL 2   &bt BT_SEL 1      &bt BT_SEL 0      &bt BT_CLR
&sys_reset   &kp LESS_THAN   &kp LESS_THAN  &kp GREATER_THAN  &kp GREATER_THAN  &none         &none         &kp LESS_THAN  &kp LESS_THAN  &kp GREATER_THAN  &kp GREATER_THAN  &sys_reset
                                            &trans            &to 0             &to 0         &to 0         &to 0          &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        function_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

/*
 *    0   1   2   3   4   5     6   7   8   9  10  11
 *   12  13  14  15  16  17    18  19  20  21  22  23
 *   24  25  26  27  28  29    30  31  32  33  34  35
 *               36  37  38    39  40  41
 */
